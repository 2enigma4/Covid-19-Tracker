{"version":3,"sources":["util.js","InfoBox/InfoBox.js","Table/Table.js","LineGraph/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["indiaStates","getMonthName","monthNum","month","Array","getDateTime","ISO_date","d","Date","hrs","getHours","min","getMinutes","am_pm","getDate","getMonth","getStateNameByCode","stateCode","sortData","data","sortedData","sort","a","b","confirm","commaFormatNumbers","val","Intl","NumberFormat","format","InfoBox","bgColor","title","cases","Card","className","style","backgroundColor","CardContent","Typography","color","Table","props","casesTable","map","state","name","active","recover","death","tested","vaccine1","vaccine2","buildChartData","caseType","dataPoints","xDatapoints","new_data","cases_time_series","point","push","dailyconfirmed","dailyrecovered","dailydeceased","date","XAxisData","new_date","dateymd","new_format","slice","getFullYear","graphTitle","LineGraph","borderColor","useState","setData","xData","setXData","casetype","useEffect","fetch","then","response","json","chartData","XAxisPoints","fetchData","data1","labels","datasets","fill","pointRadius","borderWidth","tension","pointHoverRadius","options","responsive","plugins","legend","display","scales","x","ticks","maxTicksLimit","grid","y","App","allStateData","setAllStateData","states","setState","currentState","setCurrentState","stateCasesInfo","setCasesInfo","stateMetaInfo","setMetaInfo","tableData","setTableData","districts","setDistricts","districtInfo","setDistrictInfo","activeCases","value","total","other","getTableData","tableInfo","confirmed","recovered","deceased","vaccinated1","vaccinated2","sortedTableData","axios","get","meta","statesName","Object","keys","splice","getStatesList","catch","err","alert","district","getDistrictData","onStateChange","event","target","Navbar","bg","variant","Container","Brand","population","toFixed","FormControl","Select","onChange","MenuItem","last_updated","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9967c99.chunk.js","sourcesContent":["const indiaStates = {\r\n    \"AP\":\"Andhra Pradesh\",\r\n    \"AR\":\"Arunachal Pradesh\",\r\n    \"AS\":\"Assam\",\r\n    \"BR\":\"Bihar\",\r\n    \"CT\":\"Chattisgarh\",\r\n    \"DL\":\"Delhi\",\r\n    \"GA\":\"Goa\",\r\n    \"GJ\":\"Gujrat\",\r\n    \"HR\":\"Haryana\",\r\n    \"HP\":\"Himachal Pradesh\",\r\n    \"JK\":\"Jammu and Kashmir\",\r\n    \"JH\":\"Jharkhand\",\r\n    \"KA\":\"Karnataka\",\r\n    \"KL\":\"Kerala\",\r\n    \"LD\":\"Lakshadweep\",\r\n    \"MP\":\"Madhya Pradesh\",\r\n    \"MH\":\"Maharashtra\",\r\n    \"MN\":\"Manipur\",\r\n    \"ML\":\"Meghalaya\",\r\n    \"MZ\":\"Mizoram\",\r\n    \"NL\":\"Nagaland\",\r\n    \"OR\":\"Odisha\",\r\n    \"PY\":\"Pondicherry\",\r\n    \"PB\":\"Punjab\",\r\n    \"RJ\":\"Rajasthan\",\r\n    \"SK\":\"Sikkim\",\r\n    \"TN\":\"Tamil Nadu\",\r\n    \"TG\":\"Telangana\",\r\n    \"TR\":\"Tripura\",\r\n    \"UP\":\"Uttar Pradesh\",\r\n    \"UT\":\"Uttarakhand\",\r\n    \"WB\":\"West Bengal\",\r\n    \"AN\":\"Andaman and Nicobar Islands\",\r\n    \"CH\":\"Chandigarh\",\r\n    \"LA\":\"Ladakh\",\r\n    \"DN\":\"Dadra and Nagar\",\r\n    \"TT\":\"India\"\r\n}\r\n\r\nexport function getMonthName(monthNum) {\r\n    var month = new Array();\r\n    month[0] = \"January\";\r\n    month[1] = \"February\";\r\n    month[2] = \"March\";\r\n    month[3] = \"April\";\r\n    month[4] = \"May\";\r\n    month[5] = \"June\";\r\n    month[6] = \"July\";\r\n    month[7] = \"August\";\r\n    month[8] = \"September\";\r\n    month[9] = \"October\";\r\n    month[10] = \"November\";\r\n    month[11] = \"December\";\r\n    \r\n    return month[monthNum];\r\n  }\r\n\r\nexport const getDateTime =(ISO_date)=>{\r\n    const d= new Date(ISO_date);\r\n    const hrs = (d.getHours()>12) ? d.getHours()-12 : d.getHours();\r\n    const min = (d.getMinutes()<10 ? \"0\"+d.getMinutes() : d.getMinutes());\r\n    const am_pm = (d.getHours()>=12) ? \"PM\" : \"AM\";\r\n    const IST_date = `${d.getDate()} ${getMonthName(d.getMonth())}, ${(hrs==0)?\"12\":hrs}:${min} ${am_pm} IST`;\r\n    return IST_date;\r\n}\r\n\r\nexport const getStateNameByCode = function(stateCode){\r\n    return(indiaStates[stateCode]);\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a,b)=>{\r\n        if(a.confirm > b.confirm){\r\n            return -1 ;\r\n        }\r\n        else{\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n};\r\n\r\nexport const commaFormatNumbers = (val) =>{\r\n    var nf = new Intl.NumberFormat('en-IN');\r\n    return nf.format(val);\r\n}\r\n\r\n\r\nexport const formatNumbers = (val) => {\r\n    if (val >= 10000000) {\r\n        val = (val / 10000000).toFixed(2) + ' Cr';\r\n      } else if (val >= 100000) {\r\n        val = (val / 100000).toFixed(2) + ' Lac';\r\n      }\r\n      else if(val >= 1000)\r\n         val = (val/1000).toFixed(2) + ' K';\r\n      return val;\r\n};","import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport {commaFormatNumbers} from '../util.js'\r\nimport './InfoBox.css';\r\n \r\n function InfoBox({title, cases}) {\r\n    let bgColor;\r\n    if(title == \"Confirmed\")\r\n        bgColor = \"rgb(102, 217, 255,0.2)\";\r\n    else if(title == \"Recovered\")\r\n        bgColor = \"\trgb(204, 255, 153)\";\r\n    else if(title == \"Active\")\r\n        bgColor=\"rgba(255, 0, 0, 0.3)\"\r\n    else if(title == \"Deceased\")\r\n        bgColor=\"rgb(204, 204, 204)\"\r\n\r\n     return (\r\n        <Card className=\"infoBox\" style={{backgroundColor: bgColor }}> \r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className=\"infoBox__cases\">{commaFormatNumbers(cases)}</h2>\r\n            </CardContent>\r\n        </Card>\r\n     )\r\n }\r\n \r\n export default InfoBox","import React from 'react';\r\nimport {commaFormatNumbers} from '../util.js'\r\nimport './Table.css';\r\n\r\nfunction Table(props) {\r\n    return (\r\n    <div className=\"table\">\r\n        <table>\r\n            <tr className=\"header\">\r\n                <th className=\"table__names\">State/UT or District</th>\r\n                <th>Confirmed</th>\r\n                <th>Active</th>\r\n                <th>Recovered</th>\r\n                <th>Deceased</th>\r\n                <th>Tested</th>\r\n                <th>Vaccinated[At Least One Dose]</th>\r\n                <th>Fully Vaccinated</th>\r\n            </tr>\r\n            {\r\n                props.casesTable.map((state)=>(\r\n                    <tr>\r\n                        <td className=\"table__names\"><strong>{(state.name)? state.name : \"-\"}</strong></td>\r\n                        <td>{(state.confirm)? commaFormatNumbers(state.confirm) : \"-\"}</td>\r\n                        <td>{(state.active)? commaFormatNumbers(state.active) : \"-\"}</td>\r\n                        <td>{(state.recover)? commaFormatNumbers(state.recover) : \"-\"}</td>\r\n                        <td>{(state.death)? commaFormatNumbers(state.death) : \"-\"}</td>\r\n                        <td>{(state.tested)? commaFormatNumbers(state.tested) : \"-\"}</td>\r\n                        <td>{(state.vaccine1)? commaFormatNumbers(state.vaccine1) : \"-\"}</td>\r\n                        <td>{(state.vaccine2)? commaFormatNumbers(state.vaccine2) : \"-\"}</td>\r\n                    </tr>\r\n                ))\r\n            }\r\n            \r\n        </table> \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React , {useState, useEffect}  from 'react'\r\nimport {Line} from \"react-chartjs-2\";\r\nimport './LineGraph.css';\r\nimport { Typography } from '@material-ui/core';\r\nimport {getMonthName} from '../util.js';\r\n\r\nconst buildChartData = ((data,caseType)=>{\r\n    const dataPoints = [];\r\n    const xDatapoints =[];\r\n    const new_data = data.cases_time_series;\r\n\r\n    for(let point in data.cases_time_series){\r\n        if(caseType == \"confirm\")\r\n          dataPoints.push(new_data[point].dailyconfirmed);\r\n        else if(caseType == \"recover\")\r\n          dataPoints.push(new_data[point].dailyrecovered);\r\n        else if(caseType == \"death\")\r\n          dataPoints.push(new_data[point].dailydeceased);\r\n        xDatapoints.push(new_data[point].date);\r\n    }\r\n    return dataPoints;\r\n});\r\n\r\n\r\nconst XAxisData = ((data)=>{\r\n  const xDatapoints =[];\r\n  const new_data = data.cases_time_series;\r\n\r\n  for(let point in data.cases_time_series){\r\n      const new_date = new Date(new_data[point].dateymd);\r\n      const new_format = getMonthName(new_date.getMonth()).slice(0,3)+' '+new_date.getFullYear();\r\n      xDatapoints.push(new_format);\r\n  }\r\n\r\n  // console.log(xDatapoints);\r\n  return xDatapoints;\r\n});\r\n\r\nconst graphTitle = ((caseType)=>{\r\n    if(caseType == \"confirm\")\r\n    {\r\n      return (\r\n        <h5 style={{color:\"\trgb(0, 153, 204)\"}}>Confirmed Cases</h5>\r\n      );\r\n    }\r\n    else if(caseType == \"recover\")\r\n    {\r\n      return (\r\n        <h5 style={{color:\"\trgba(75,192,192)\"}}>Recovered Cases</h5>\r\n      );\r\n    }\r\n    else if(caseType == \"death\"){\r\n      return (\r\n        <h5 style={{color:\"\trgb(204, 0, 0)\"}}>Deceased Cases</h5>\r\n      );\r\n    }\r\n\r\n});\r\n\r\n\r\nfunction LineGraph(props) {\r\n\r\n    const[data, setData] = useState([]);\r\n    const[xData, setXData] = useState([]);\r\n\r\n    const caseType = props.casetype;\r\n\r\n    let bgColor , borderColor, label;\r\n\r\n    useEffect(() => {\r\n        const fetchData = (async()=>{\r\n            await fetch('https://api.covid19india.org/data.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data,caseType);\r\n                setData(chartData);\r\n                let XAxisPoints = XAxisData(data);\r\n                setXData(XAxisPoints);\r\n            });\r\n        });\r\n    fetchData();\r\n    }, []);\r\n\r\n  \r\n    if(caseType == \"confirm\")\r\n    {\r\n      bgColor = \"\trgb(0, 153, 204,0.2)\";\r\n      borderColor = \"\trgb(0, 153, 204)\";\r\n      label = \"Confirmed Cases\";\r\n    }\r\n    else if(caseType == \"recover\")\r\n    {\r\n      bgColor = \"\trgb(0, 204, 0,0.2)\";\r\n      borderColor = \"rgba(75,192,192)\"; \r\n      label = \"Recovered Cases\"; \r\n    }\r\n    else if(caseType == \"death\"){\r\n      bgColor = \"rgb(204, 0, 0,0.2)\";\r\n      borderColor = \"\trgb(204, 0, 0)\";  \r\n      label = \"Deceased Cases\";\r\n    }\r\n\r\n    const data1 = {\r\n      labels: xData,\r\n      datasets: [\r\n        {\r\n            // label: label,\r\n            data: data,\r\n            fill: true,\r\n            backgroundColor: bgColor,\r\n            borderColor: borderColor,\r\n            pointRadius : 0,\r\n            borderWidth:2,\r\n            tension : 0,\r\n            pointHoverRadius : 5\r\n        },\r\n      ]\r\n    };\r\n\r\n    return (\r\n    <div className=\"line_graph\">\r\n      <div className=\"graph_header\">\r\n        {graphTitle(caseType)}\r\n        <Typography style={{color:\"gray\"}}>India, Total</Typography>\r\n      </div>\r\n      <hr className =\"graph_divider\"></hr>\r\n      <Line \r\n      data={data1}\r\n      options={{\r\n        responsive : true,\r\n        plugins : {\r\n          legend :{\r\n            display : false\r\n          }\r\n        },\r\n        scales: {\r\n          x : {\r\n            ticks :{\r\n              maxTicksLimit : 10\r\n            },\r\n            grid :{\r\n              display : false\r\n            },\r\n          },\r\n          y :{\r\n            grid :{\r\n              display :false \r\n            }\r\n          }\r\n        }\r\n      }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Navbar,Form} from 'react-bootstrap';\nimport {FormControl, MenuItem, Select, makeStyles, Typography} from \"@material-ui/core\";\nimport { useEffect, useState } from 'react';\nimport {getStateNameByCode, sortData, getDateTime, formatNumbers} from './util.js';\nimport InfoBox from './InfoBox/InfoBox.js';\nimport Table from './Table/Table.js';\nimport axios from 'axios';\nimport LineGraph from './LineGraph/LineGraph.js';\n\n\nfunction App() {\n    // all API Data\n  const[allStateData, setAllStateData]=useState({});\n  //All states with code and name\n  const[states, setState]= useState([]);\n  //current state code\n  const[currentState, setCurrentState] = useState(\"TT\");\n  //each state total info\n  const[stateCasesInfo, setCasesInfo]= useState([]);\n  //each state meta info\n  const[stateMetaInfo, setMetaInfo]= useState([]);\n  //data displayed by table\n  const[tableData, setTableData] = useState([]);\n  //Each state districts with keys = district_name \n  const[districts,setDistricts]= useState([]);\n  //each state all districts info\n  const[districtInfo, setDistrictInfo]= useState([]);\n\n  // Array of all states with name and code//\n  const getStatesList = function(data){\n    const stateCodes = Object.keys(data);\n    const statesName = stateCodes.map((state) => (\n      {\n        name : getStateNameByCode(state),\n        value : state\n      }))\n      const india = statesName.splice(33,1);\n      return statesName;\n  }\n\n  const activeCases = function(data,value){\n    if(!data[value].total.other)\n      return 0;\n    else\n      return data[value].total.other;\n  };\n\n  const getTableData = function(data){\n    const tableInfo = states.map((state)=>(\n      {\n         name : state.name,\n         confirm : data[state.value].total.confirmed,\n         active: data[state.value].total.confirmed-\n                 data[state.value].total.recovered-\n                 data[state.value].total.deceased-\n                 activeCases(allStateData,state.value),\n         recover: data[state.value].total.recovered,\n         death: data[state.value].total.deceased,\n         tested: data[state.value].total.tested,\n         vaccine1: data[state.value].total.vaccinated1,\n         vaccine2: data[state.value].total.vaccinated2\n      }\n     ));\n     const sortedTableData = sortData(tableInfo);\n     setTableData(sortedTableData);\n  }\n\n  const getDistrictData = function(data){\n    const tableInfo = districts.map((district)=>(\n      {\n         name : district,\n         confirm : data[district].total.confirmed,\n         active: data[district].total.confirmed-\n                 data[district].total.recovered-\n                 data[district].total.deceased-\n                 activeCases(districtInfo,district),\n         recover: data[district].total.recovered,\n         death: data[district].total.deceased,\n         tested: data[district].total.tested,\n         vaccine1: data[district].total.vaccinated1,\n         vaccine2: data[district].total.vaccinated2,\n      }\n     ));\n     const sortedTableData = sortData(tableInfo);\n     setTableData(sortedTableData);\n  }\n\n  const getActiveCases = ()=>{\n    if(stateCasesInfo.other){\n      return stateCasesInfo.confirmed-stateCasesInfo.deceased-stateCasesInfo.recovered-stateCasesInfo.other;\n    }\n    else{\n      return stateCasesInfo.confirmed-stateCasesInfo.deceased-stateCasesInfo.recovered;\n    }\n  }\n\nuseEffect(()=>{\n    axios.get(`https://api.covid19india.org/v4/min/data.min.json`)\n    .then(response => {\n      const data = response.data;\n      setAllStateData(data);\n      setCasesInfo(data[currentState].total);\n      setMetaInfo(data[currentState].meta);\n      const statesName = getStatesList(data);\n      setState(statesName);\n    })\n    .catch(err => alert(\"OOps! Something went wrong.\"))\n  },[])\n\n\nuseEffect(()=>{\n  axios.get(`https://api.covid19india.org/v4/min/data.min.json`)\n    .then(response => {\n        const data = response.data;\n        getTableData(data);\n    })\n    .catch(err => alert(\"OOps! Something went wrong.\"))\n},[states])\n\nuseEffect(()=>{\n  setDistricts(Object.keys(districtInfo));\n},[districtInfo])\n\n\nuseEffect(()=>{\n  getDistrictData(districtInfo);\n},[districts])\n\nconst onStateChange = async (event) => {\n    const stateCode = event.target.value;\n    setCurrentState(stateCode);\n    setCasesInfo(allStateData[stateCode].total);\n    setMetaInfo(allStateData[stateCode].meta);\n    if(stateCode!=\"TT\")\n      setDistrictInfo(allStateData[stateCode].districts);\n    else\n      getTableData(allStateData);\n\n  };\n\n  return (\n    <div className=\"App\">\n      {/* navbar */}\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand>Covid-19</Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      {/* header */}\n      <div className=\"app__header\">\n        <h1 className=\"app__headertext\">COVID19 INDIA</h1>\n      </div>\n\n      <div className=\"app__container\">\n        <div className=\"container__left\">\n          <div className=\"left_search\">\n            <div className=\"left_header\">\n              <div>\n                <h3 className=\"app__headertext\">{getStateNameByCode(currentState)}</h3>\n              </div>\n              <div className=\"app__popheader\">\n                <h3 className=\"app__poptext\" >Population</h3>\n                <h5 className=\"app__popvalue\">{formatNumbers(stateMetaInfo.population)}</h5>\n              </div>\n            </div>\n            <div className=\"search__text\">\n                <Typography>search your state</Typography>\n            </div>\n            <div>\n                <FormControl className=\"app__form\">\n                <Select onChange={onStateChange} value={currentState} >\n                  <MenuItem value=\"TT\">India</MenuItem>\n                    {\n                      states.map((state)=>(\n                      <MenuItem value={state.value}>{state.name}</MenuItem>\n                      ))\n                    }\n                </Select>\n                </FormControl>\n            </div>\n          </div>\n          <div className=\"app__stats\">\n            <InfoBox title=\"Confirmed\" cases={stateCasesInfo.confirmed}></InfoBox>\n            <InfoBox title=\"Active\" cases={getActiveCases()}></InfoBox>\n            <InfoBox title=\"Recovered\" cases={stateCasesInfo.recovered}></InfoBox>\n            <InfoBox title=\"Deceased\" cases={stateCasesInfo.deceased}></InfoBox>\n          </div>\n          <div className=\"app__update\">\n            <Typography>Last Updated on {getDateTime(stateMetaInfo.last_updated)}</Typography>\n            {/* <h6 >Last Updated on {getDateTime(stateMetaInfo.last_updated)}</h6> */}\n          </div>\n          <div className=\"app__table\">\n             <Table casesTable={tableData}></Table>\n          </div>\n        </div>\n        <div className=\"container__right\">\n          <div className=\"app__update\">\n            <Typography>CASES VISUALIZATIONS</Typography>\n          </div>\n            <div className=\"app__charts\">\n              <LineGraph casetype=\"confirm\"></LineGraph>\n              <LineGraph casetype=\"recover\"></LineGraph>\n              <LineGraph casetype=\"death\"></LineGraph>\n              {/* <LineGraph></LineGraph> */}\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}